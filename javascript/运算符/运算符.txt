#第三章  运算符(操作符)

###  3.1赋值运算符
3.1.1  简单赋值
    var a = 10
    
3.1.2  复合赋值
    如果在等号前面加上+ - * /, 就可以完成复合赋值.
  += -+ *= /= <<= >>=,后面两个不常用
    var b = 10
    b = 10+1
//  可以简写成
    b += 1
    
###  3.2 一元运算符
     一元运算符是只能操作一个值得运算符,它包括很多,但最经常得就是递增和递减的运算符
     
3.2.1  使用方式
    var a = 10
    a++  //相当于 a+=1
    console.log(a)  //11
    
3.2.2  前置和后置的区别
    var a = 10
    a++
    console.log(a)
    var b = 10
    console.log(b++)  //10
    console.log(b)  //11
            
    var c = 10
    ++c
    console.log(c) //11
    console.log(++c)  //12    

###  3.3关系运算符
     关系运算符,分别为< > <= >= 返回值都是布尔值.
     
     一个input,让用户输入年龄,按钮
     <6 免费
     >80  5折
         其他 正常
         
###  3.4  相等运算符
   ==  ===  !=  !==  返回的都是布尔值,相等和不相等,都先是转换数据类型在比较,全等和不全等,仅比较不转换类型
    注意:==不会比较数据类型,===会比较数据类型

###  3.5 条件预算符(三目、三元)
   他允许将简单的if条件判断语句嵌入到表达式中
     var a = 10
	 var b = 20
	 //你要比较的内容  ?true: false
     a<b? alert("yes") : alert("no")
			
			
###   逻辑运算符
    在逻辑运算符之前,需要掌握数据类型的知识,因为所有的逻辑操作符返回值都是布尔,因此,返回值转换非常重要
    
  3.6.1  ! 逻辑非
   逻辑非表示,首先会将!后面的值转换为一个布尔值,然而对其求相反
   
  3.6.2  & 逻辑与
  &左右两边,只要有一个是false就是false,两边都是true才是true.
  
  3.6.3  | 逻辑或
  |左右两边,只要有一个是true就是true,两边都是false才是false.

  3.6.4  短路与&&
   他的运算过程更加高效,只要左边的运算结果为false,那么后面的就不再进行运算
  
  3.6.5  短路或||
   他的运算过程更加高效,只要左边的运算结果为true,那么后面的就不再进行运算
   
      练习:
      1.3.8妇女节,该饭店对女性顾客5折,其他顾客不优惠,对优惠和不优惠的顾客分别显示弹出框

