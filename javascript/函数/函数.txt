#  第四章 函数  
###  4.1 函数的概念
     在JavaScript中,函数实际上是一个对象,每个函数都是Function类型的实例,
     并且与其他引用类型一样具有属性和方法.
     通过函数可以封装任意多条语句,并且可以在任何地方任何时候调用执行.
     在ECMAScript中的函数使用function关键字来声明,后面跟一组函数名和函数体.
     
###  4.2 函数的创建
  4.2.1 函数声明语句
           以这种方式创建的函数,会把函数名提升到该作用域的最顶端,不论在该作用域下何处调用都可以执行
           如果在该作用域下的其他作用域下调用也可以执行
         //关键词            函数名   (参数列表)
			function aname(){
				//执行语句
				alert(123);
			}
			//函数的调用
			aname();
			
  4.2.2 变量匿名函数
           //变量名       关键词(参数列表)
            var a = function(){
//            	执行语句
            }
//          函数调用
            a()
            
  4.2.3 匿名函数自调用
        (function(){
            //执行语句
        })();
  
  4.2.4 函数声明和变量匿名函数区别 
         函数声明语句创建的函数,在该作用域下任何地方调用均可,但已变量创建的匿名函数则和正常变量赋值相同,需要在变量赋值后调用,否则报错 
   
  4.2.5 函数不能重载
         重载:在程序中可以定义多个相同函数名,不同参数列表的函数,调用者不必区分每个函数的参数,执行时,程序根据传入的函数个数,自行判断选择哪一个函数执行.
   JavaScript不支持重载.
   
###  4.3 函数的参数
       在JavaScript中,函数的关键词后面跟随的小括号,是参数(形参)列表,调用时,表达式的括号中传入实际参数,
       函数的参数在function内可以用arguments对象
       形参和实参是一一对应的,都可以用arguments获取到实参的内容
            function aaa(x,y,z){
				console.log(arguments[1])
			}
			aaa('a','b','c')
			
###  4.4 this
  this是JavaScript上语言的一个关键字,它代表函数运行时,自动生成的一个内部对象,只能在函数内部使用,
      随着函数试用场合的不同,this的值会发生变化,但有一个原则,就是this指的是,调用函数的那个对象.
      绑定事件,指定调用函数的对象
      
###  4.5 函数的返回值
     返回值是一个函数的处理结果,如果我们需要在程序中拿到函数的处理结果,做进一步的处理,则需要函数必须有返回值,函数的返回值用return去定义
     注意:return是一个函数结束的标志,只要执行一次,整个函数就会结束运行
     使用return之后,跟在return后面的值就是整个函数的返回值.
     如果函数没有使用return语句,那么函数的默认返回值是undefined.
     
###  4.6 全局变量和局部变量
   作用域是数据可以在哪个范围使用,在ES5中,只要全局作用域和函数作用域,在ES6中出现了块级作用域
   
  4.6.1  全局作用域
       在任何地方都能访问,函数外定义的变量拥有全局作用域,不使用var定义的变量拥有全局作用域,也是所有window对象上的属性.
       
  4.6.2  函数作用域
    声明在函数内部,和全局作用域相反,局部作用域,一般只会在固定的代码片段内访问到,如函数作用域,所以在一些地方有人把这种作用域称为函数作用域
    
  4.6.3  全局变量
    在函数外声明的变量叫全局变量,在函数内外都可以访问到.
    
  4.6.4  局部变量
    在函数内部创建,在函数外访问不到,在函数内部如果局部变量和全局变量名称相同时,优先使用局部变量,当在函数内部找不到需要的变量时,则去全局变量找,
    但如果有参数名称符合要求时,则会选择参数作为需要的变量
     使用顺序:局部  参数  全局
     
  4.6.5  作用域链
     作用域链决定了哪些数据能被函数访问,当一个函数创建后,他的作用域链会被创建在次函数的作用域中,从而访问数据.
     可以把它们理解成一个链接房间的链条,当全局变量缺失时,就会顺着这个链条到全局,去寻找想要的变量
     
     
    
  
         






































